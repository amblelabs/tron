plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        url "https://jitpack.io"

        metadataSources {
            artifact() // Look directly for artifact
        }
    }

    // YACL
    maven { url 'https://maven.isxander.dev/releases' }

    // ModMenu
    maven { url "https://maven.terraformersmc.com/releases/" }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url "https://amblelabs.github.io/maven"

        content {
            includeGroup "dev.amble"
        }
    }

    maven {
        url "https://theo.is-a.dev/maven/"

        content {
            includeGroup "dev.drtheo"
        }
    }
}

loom {
    // accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")

    runs {
        // This adds a new gradle task that runs the datagen API
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi("dev.amble:lib:${project.amblekit_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files, I don"t why this even works
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "yacl_version", project.yacl_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "yacl_version": project.yacl_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
    }
}